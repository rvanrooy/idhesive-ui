/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Idhesive API
 * Idhesive API for intelligent policy management and enforcement platform
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  AuthResponse,
  CreateOrganizationRequest,
  LoginRequest,
  Organization,
  Project,
  ProjectUpdate,
  RefreshTokenRequest,
  SignupRequest,
  Team,
  TeamUpdate,
  TokenInfo,
  UpdateOrganizationRequest,
  User,
  UserUpdate,
  Uuid
} from '.././model';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

/**
 * User login
 */
export const authLogin = (
  loginRequest: LoginRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AuthResponse>> => {
  return axios.post(`/auth/login`, loginRequest, options);
};

export const getAuthLoginMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ['authLogin'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authLogin>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authLogin>>
>;
export type AuthLoginMutationBody = LoginRequest;
export type AuthLoginMutationError = AxiosError<unknown>;

export const useAuthLogin = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof authLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Logout user
 */
export const authLogout = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/auth/logout`, undefined, options);
};

export const getAuthLogoutMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLogout>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['authLogout'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authLogout>>,
    void
  > = () => {
    return authLogout(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authLogout>>
>;

export type AuthLogoutMutationError = AxiosError<unknown>;

export const useAuthLogout = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLogout>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof authLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Refresh authentication token
 */
export const authRefreshToken = (
  refreshTokenRequest: RefreshTokenRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TokenInfo>> => {
  return axios.post(`/auth/refresh`, refreshTokenRequest, options);
};

export const getAuthRefreshTokenMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authRefreshToken>>,
    TError,
    { data: RefreshTokenRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authRefreshToken>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const mutationKey = ['authRefreshToken'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authRefreshToken>>,
    { data: RefreshTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authRefreshToken(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthRefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof authRefreshToken>>
>;
export type AuthRefreshTokenMutationBody = RefreshTokenRequest;
export type AuthRefreshTokenMutationError = AxiosError<unknown>;

export const useAuthRefreshToken = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authRefreshToken>>,
    TError,
    { data: RefreshTokenRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof authRefreshToken>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const mutationOptions = getAuthRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * User signup
 */
export const authSignup = (
  signupRequest: SignupRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AuthResponse>> => {
  return axios.post(`/auth/signup`, signupRequest, options);
};

export const getAuthSignupMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authSignup>>,
    TError,
    { data: SignupRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authSignup>>,
  TError,
  { data: SignupRequest },
  TContext
> => {
  const mutationKey = ['authSignup'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authSignup>>,
    { data: SignupRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authSignup(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof authSignup>>
>;
export type AuthSignupMutationBody = SignupRequest;
export type AuthSignupMutationError = AxiosError<unknown>;

export const useAuthSignup = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authSignup>>,
    TError,
    { data: SignupRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof authSignup>>,
  TError,
  { data: SignupRequest },
  TContext
> => {
  const mutationOptions = getAuthSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create a new organization
 */
export const organizationsCreate = (
  createOrganizationRequest: CreateOrganizationRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Organization>> => {
  return axios.post(`/organizations`, createOrganizationRequest, options);
};

export const getOrganizationsCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsCreate>>,
    TError,
    { data: CreateOrganizationRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizationsCreate>>,
  TError,
  { data: CreateOrganizationRequest },
  TContext
> => {
  const mutationKey = ['organizationsCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizationsCreate>>,
    { data: CreateOrganizationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return organizationsCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizationsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizationsCreate>>
>;
export type OrganizationsCreateMutationBody = CreateOrganizationRequest;
export type OrganizationsCreateMutationError = AxiosError<unknown>;

export const useOrganizationsCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsCreate>>,
    TError,
    { data: CreateOrganizationRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof organizationsCreate>>,
  TError,
  { data: CreateOrganizationRequest },
  TContext
> => {
  const mutationOptions = getOrganizationsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List all organizations
 */
export const organizationsList = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Organization[]>> => {
  return axios.get(`/organizations`, options);
};

export const getOrganizationsListQueryKey = () => {
  return [`/organizations`] as const;
};

export const getOrganizationsListQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsList>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof organizationsList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOrganizationsListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof organizationsList>>
  > = ({ signal }) => organizationsList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrganizationsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof organizationsList>>
>;
export type OrganizationsListQueryError = AxiosError<unknown>;

export function useOrganizationsList<
  TData = Awaited<ReturnType<typeof organizationsList>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof organizationsList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get organization by ID
 */
export const organizationsGet = (
  id: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Organization>> => {
  return axios.get(`/organizations/${id}`, options);
};

export const getOrganizationsGetQueryKey = (id: Uuid) => {
  return [`/organizations/${id}`] as const;
};

export const getOrganizationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsGet>>,
  TError = AxiosError<unknown>
>(
  id: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof organizationsGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOrganizationsGetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof organizationsGet>>
  > = ({ signal }) => organizationsGet(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OrganizationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof organizationsGet>>
>;
export type OrganizationsGetQueryError = AxiosError<unknown>;

export function useOrganizationsGet<
  TData = Awaited<ReturnType<typeof organizationsGet>>,
  TError = AxiosError<unknown>
>(
  id: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof organizationsGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsGetQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update organization
 */
export const organizationsUpdate = (
  id: Uuid,
  updateOrganizationRequest: UpdateOrganizationRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Organization>> => {
  return axios.patch(
    `/organizations/${id}`,
    updateOrganizationRequest,
    options
  );
};

export const getOrganizationsUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsUpdate>>,
    TError,
    { id: Uuid; data: UpdateOrganizationRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizationsUpdate>>,
  TError,
  { id: Uuid; data: UpdateOrganizationRequest },
  TContext
> => {
  const mutationKey = ['organizationsUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizationsUpdate>>,
    { id: Uuid; data: UpdateOrganizationRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return organizationsUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizationsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizationsUpdate>>
>;
export type OrganizationsUpdateMutationBody = UpdateOrganizationRequest;
export type OrganizationsUpdateMutationError = AxiosError<unknown>;

export const useOrganizationsUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsUpdate>>,
    TError,
    { id: Uuid; data: UpdateOrganizationRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof organizationsUpdate>>,
  TError,
  { id: Uuid; data: UpdateOrganizationRequest },
  TContext
> => {
  const mutationOptions = getOrganizationsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete organization
 */
export const organizationsDelete = (
  id: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/organizations/${id}`, options);
};

export const getOrganizationsDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsDelete>>,
    TError,
    { id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizationsDelete>>,
  TError,
  { id: Uuid },
  TContext
> => {
  const mutationKey = ['organizationsDelete'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizationsDelete>>,
    { id: Uuid }
  > = (props) => {
    const { id } = props ?? {};

    return organizationsDelete(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type OrganizationsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizationsDelete>>
>;

export type OrganizationsDeleteMutationError = AxiosError<unknown>;

export const useOrganizationsDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsDelete>>,
    TError,
    { id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof organizationsDelete>>,
  TError,
  { id: Uuid },
  TContext
> => {
  const mutationOptions = getOrganizationsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create a new Project
 */
export const projectsCreate = (
  organizationId: Uuid,
  project: NonReadonly<Project>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Project>> => {
  return axios.post(
    `/organizations/${organizationId}/projeects`,
    project,
    options
  );
};

export const getProjectsCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsCreate>>,
    TError,
    { organizationId: Uuid; data: NonReadonly<Project> },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectsCreate>>,
  TError,
  { organizationId: Uuid; data: NonReadonly<Project> },
  TContext
> => {
  const mutationKey = ['projectsCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof projectsCreate>>,
    { organizationId: Uuid; data: NonReadonly<Project> }
  > = (props) => {
    const { organizationId, data } = props ?? {};

    return projectsCreate(organizationId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProjectsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof projectsCreate>>
>;
export type ProjectsCreateMutationBody = NonReadonly<Project>;
export type ProjectsCreateMutationError = AxiosError<unknown>;

export const useProjectsCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsCreate>>,
    TError,
    { organizationId: Uuid; data: NonReadonly<Project> },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof projectsCreate>>,
  TError,
  { organizationId: Uuid; data: NonReadonly<Project> },
  TContext
> => {
  const mutationOptions = getProjectsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List projects in org
 */
export const projectsList = (
  organizationId: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Project[]>> => {
  return axios.get(`/organizations/${organizationId}/projeects`, options);
};

export const getProjectsListQueryKey = (organizationId: Uuid) => {
  return [`/organizations/${organizationId}/projeects`] as const;
};

export const getProjectsListQueryOptions = <
  TData = Awaited<ReturnType<typeof projectsList>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof projectsList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProjectsListQueryKey(organizationId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectsList>>> = ({
    signal
  }) => projectsList(organizationId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!organizationId,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof projectsList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProjectsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof projectsList>>
>;
export type ProjectsListQueryError = AxiosError<unknown>;

export function useProjectsList<
  TData = Awaited<ReturnType<typeof projectsList>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof projectsList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectsListQueryOptions(organizationId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get project by ID
 */
export const projectsGet = (
  organizationId: Uuid,
  id: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Project>> => {
  return axios.get(`/organizations/${organizationId}/projeects/${id}`, options);
};

export const getProjectsGetQueryKey = (organizationId: Uuid, id: Uuid) => {
  return [`/organizations/${organizationId}/projeects/${id}`] as const;
};

export const getProjectsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof projectsGet>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  id: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof projectsGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProjectsGetQueryKey(organizationId, id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectsGet>>> = ({
    signal
  }) => projectsGet(organizationId, id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(organizationId && id),
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof projectsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProjectsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof projectsGet>>
>;
export type ProjectsGetQueryError = AxiosError<unknown>;

export function useProjectsGet<
  TData = Awaited<ReturnType<typeof projectsGet>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  id: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof projectsGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectsGetQueryOptions(organizationId, id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update project
 */
export const projectsUpdate = (
  organizationId: Uuid,
  id: Uuid,
  projectUpdate: ProjectUpdate,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Project>> => {
  return axios.patch(
    `/organizations/${organizationId}/projeects/${id}`,
    projectUpdate,
    options
  );
};

export const getProjectsUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsUpdate>>,
    TError,
    { organizationId: Uuid; id: Uuid; data: ProjectUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectsUpdate>>,
  TError,
  { organizationId: Uuid; id: Uuid; data: ProjectUpdate },
  TContext
> => {
  const mutationKey = ['projectsUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof projectsUpdate>>,
    { organizationId: Uuid; id: Uuid; data: ProjectUpdate }
  > = (props) => {
    const { organizationId, id, data } = props ?? {};

    return projectsUpdate(organizationId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProjectsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof projectsUpdate>>
>;
export type ProjectsUpdateMutationBody = ProjectUpdate;
export type ProjectsUpdateMutationError = AxiosError<unknown>;

export const useProjectsUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsUpdate>>,
    TError,
    { organizationId: Uuid; id: Uuid; data: ProjectUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof projectsUpdate>>,
  TError,
  { organizationId: Uuid; id: Uuid; data: ProjectUpdate },
  TContext
> => {
  const mutationOptions = getProjectsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete project
 */
export const projectsDelete = (
  organizationId: Uuid,
  id: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(
    `/organizations/${organizationId}/projeects/${id}`,
    options
  );
};

export const getProjectsDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsDelete>>,
    TError,
    { organizationId: Uuid; id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectsDelete>>,
  TError,
  { organizationId: Uuid; id: Uuid },
  TContext
> => {
  const mutationKey = ['projectsDelete'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof projectsDelete>>,
    { organizationId: Uuid; id: Uuid }
  > = (props) => {
    const { organizationId, id } = props ?? {};

    return projectsDelete(organizationId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProjectsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof projectsDelete>>
>;

export type ProjectsDeleteMutationError = AxiosError<unknown>;

export const useProjectsDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsDelete>>,
    TError,
    { organizationId: Uuid; id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof projectsDelete>>,
  TError,
  { organizationId: Uuid; id: Uuid },
  TContext
> => {
  const mutationOptions = getProjectsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create a new team
 */
export const teamsCreate = (
  organizationId: Uuid,
  team: NonReadonly<Team>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Team>> => {
  return axios.post(`/organizations/${organizationId}/teams`, team, options);
};

export const getTeamsCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamsCreate>>,
    TError,
    { organizationId: Uuid; data: NonReadonly<Team> },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof teamsCreate>>,
  TError,
  { organizationId: Uuid; data: NonReadonly<Team> },
  TContext
> => {
  const mutationKey = ['teamsCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teamsCreate>>,
    { organizationId: Uuid; data: NonReadonly<Team> }
  > = (props) => {
    const { organizationId, data } = props ?? {};

    return teamsCreate(organizationId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TeamsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof teamsCreate>>
>;
export type TeamsCreateMutationBody = NonReadonly<Team>;
export type TeamsCreateMutationError = AxiosError<unknown>;

export const useTeamsCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamsCreate>>,
    TError,
    { organizationId: Uuid; data: NonReadonly<Team> },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof teamsCreate>>,
  TError,
  { organizationId: Uuid; data: NonReadonly<Team> },
  TContext
> => {
  const mutationOptions = getTeamsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List teams in org
 */
export const teamsList = (
  organizationId: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Team[]>> => {
  return axios.get(`/organizations/${organizationId}/teams`, options);
};

export const getTeamsListQueryKey = (organizationId: Uuid) => {
  return [`/organizations/${organizationId}/teams`] as const;
};

export const getTeamsListQueryOptions = <
  TData = Awaited<ReturnType<typeof teamsList>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof teamsList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTeamsListQueryKey(organizationId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teamsList>>> = ({
    signal
  }) => teamsList(organizationId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!organizationId,
    ...queryOptions
  } as UseQueryOptions<Awaited<ReturnType<typeof teamsList>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type TeamsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof teamsList>>
>;
export type TeamsListQueryError = AxiosError<unknown>;

export function useTeamsList<
  TData = Awaited<ReturnType<typeof teamsList>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof teamsList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTeamsListQueryOptions(organizationId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get team by ID
 */
export const teamsGet = (
  organizationId: Uuid,
  id: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Team>> => {
  return axios.get(`/organizations/${organizationId}/teams/${id}`, options);
};

export const getTeamsGetQueryKey = (organizationId: Uuid, id: Uuid) => {
  return [`/organizations/${organizationId}/teams/${id}`] as const;
};

export const getTeamsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof teamsGet>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  id: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof teamsGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTeamsGetQueryKey(organizationId, id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teamsGet>>> = ({
    signal
  }) => teamsGet(organizationId, id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(organizationId && id),
    ...queryOptions
  } as UseQueryOptions<Awaited<ReturnType<typeof teamsGet>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type TeamsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof teamsGet>>
>;
export type TeamsGetQueryError = AxiosError<unknown>;

export function useTeamsGet<
  TData = Awaited<ReturnType<typeof teamsGet>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  id: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof teamsGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTeamsGetQueryOptions(organizationId, id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update team
 */
export const teamsUpdate = (
  organizationId: Uuid,
  id: Uuid,
  teamUpdate: TeamUpdate,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Team>> => {
  return axios.patch(
    `/organizations/${organizationId}/teams/${id}`,
    teamUpdate,
    options
  );
};

export const getTeamsUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamsUpdate>>,
    TError,
    { organizationId: Uuid; id: Uuid; data: TeamUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof teamsUpdate>>,
  TError,
  { organizationId: Uuid; id: Uuid; data: TeamUpdate },
  TContext
> => {
  const mutationKey = ['teamsUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teamsUpdate>>,
    { organizationId: Uuid; id: Uuid; data: TeamUpdate }
  > = (props) => {
    const { organizationId, id, data } = props ?? {};

    return teamsUpdate(organizationId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TeamsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof teamsUpdate>>
>;
export type TeamsUpdateMutationBody = TeamUpdate;
export type TeamsUpdateMutationError = AxiosError<unknown>;

export const useTeamsUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamsUpdate>>,
    TError,
    { organizationId: Uuid; id: Uuid; data: TeamUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof teamsUpdate>>,
  TError,
  { organizationId: Uuid; id: Uuid; data: TeamUpdate },
  TContext
> => {
  const mutationOptions = getTeamsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete team
 */
export const teamsDelete = (
  organizationId: Uuid,
  id: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/organizations/${organizationId}/teams/${id}`, options);
};

export const getTeamsDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamsDelete>>,
    TError,
    { organizationId: Uuid; id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof teamsDelete>>,
  TError,
  { organizationId: Uuid; id: Uuid },
  TContext
> => {
  const mutationKey = ['teamsDelete'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teamsDelete>>,
    { organizationId: Uuid; id: Uuid }
  > = (props) => {
    const { organizationId, id } = props ?? {};

    return teamsDelete(organizationId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TeamsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof teamsDelete>>
>;

export type TeamsDeleteMutationError = AxiosError<unknown>;

export const useTeamsDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamsDelete>>,
    TError,
    { organizationId: Uuid; id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof teamsDelete>>,
  TError,
  { organizationId: Uuid; id: Uuid },
  TContext
> => {
  const mutationOptions = getTeamsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Create a new user
 */
export const usersCreate = (
  organizationId: Uuid,
  user: NonReadonly<User>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<User>> => {
  return axios.post(`/organizations/${organizationId}/users`, user, options);
};

export const getUsersCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersCreate>>,
    TError,
    { organizationId: Uuid; data: NonReadonly<User> },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersCreate>>,
  TError,
  { organizationId: Uuid; data: NonReadonly<User> },
  TContext
> => {
  const mutationKey = ['usersCreate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersCreate>>,
    { organizationId: Uuid; data: NonReadonly<User> }
  > = (props) => {
    const { organizationId, data } = props ?? {};

    return usersCreate(organizationId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersCreate>>
>;
export type UsersCreateMutationBody = NonReadonly<User>;
export type UsersCreateMutationError = AxiosError<unknown>;

export const useUsersCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersCreate>>,
    TError,
    { organizationId: Uuid; data: NonReadonly<User> },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersCreate>>,
  TError,
  { organizationId: Uuid; data: NonReadonly<User> },
  TContext
> => {
  const mutationOptions = getUsersCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List users in organization
 */
export const usersList = (
  organizationId: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<User[]>> => {
  return axios.get(`/organizations/${organizationId}/users`, options);
};

export const getUsersListQueryKey = (organizationId: Uuid) => {
  return [`/organizations/${organizationId}/users`] as const;
};

export const getUsersListQueryOptions = <
  TData = Awaited<ReturnType<typeof usersList>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof usersList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersListQueryKey(organizationId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersList>>> = ({
    signal
  }) => usersList(organizationId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!organizationId,
    ...queryOptions
  } as UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type UsersListQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersList>>
>;
export type UsersListQueryError = AxiosError<unknown>;

export function useUsersList<
  TData = Awaited<ReturnType<typeof usersList>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof usersList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersListQueryOptions(organizationId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get user by ID
 */
export const usersGet = (
  organizationId: Uuid,
  id: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<User>> => {
  return axios.get(`/organizations/${organizationId}/users/${id}`, options);
};

export const getUsersGetQueryKey = (organizationId: Uuid, id: Uuid) => {
  return [`/organizations/${organizationId}/users/${id}`] as const;
};

export const getUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof usersGet>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  id: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof usersGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUsersGetQueryKey(organizationId, id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGet>>> = ({
    signal
  }) => usersGet(organizationId, id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(organizationId && id),
    ...queryOptions
  } as UseQueryOptions<Awaited<ReturnType<typeof usersGet>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type UsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersGet>>
>;
export type UsersGetQueryError = AxiosError<unknown>;

export function useUsersGet<
  TData = Awaited<ReturnType<typeof usersGet>>,
  TError = AxiosError<unknown>
>(
  organizationId: Uuid,
  id: Uuid,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof usersGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getUsersGetQueryOptions(organizationId, id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update user
 */
export const usersUpdate = (
  organizationId: Uuid,
  id: Uuid,
  userUpdate: UserUpdate,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<User>> => {
  return axios.patch(
    `/organizations/${organizationId}/users/${id}`,
    userUpdate,
    options
  );
};

export const getUsersUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersUpdate>>,
    TError,
    { organizationId: Uuid; id: Uuid; data: UserUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersUpdate>>,
  TError,
  { organizationId: Uuid; id: Uuid; data: UserUpdate },
  TContext
> => {
  const mutationKey = ['usersUpdate'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersUpdate>>,
    { organizationId: Uuid; id: Uuid; data: UserUpdate }
  > = (props) => {
    const { organizationId, id, data } = props ?? {};

    return usersUpdate(organizationId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersUpdate>>
>;
export type UsersUpdateMutationBody = UserUpdate;
export type UsersUpdateMutationError = AxiosError<unknown>;

export const useUsersUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersUpdate>>,
    TError,
    { organizationId: Uuid; id: Uuid; data: UserUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersUpdate>>,
  TError,
  { organizationId: Uuid; id: Uuid; data: UserUpdate },
  TContext
> => {
  const mutationOptions = getUsersUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete user
 */
export const usersDelete = (
  organizationId: Uuid,
  id: Uuid,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/organizations/${organizationId}/users/${id}`, options);
};

export const getUsersDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDelete>>,
    TError,
    { organizationId: Uuid; id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersDelete>>,
  TError,
  { organizationId: Uuid; id: Uuid },
  TContext
> => {
  const mutationKey = ['usersDelete'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersDelete>>,
    { organizationId: Uuid; id: Uuid }
  > = (props) => {
    const { organizationId, id } = props ?? {};

    return usersDelete(organizationId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersDelete>>
>;

export type UsersDeleteMutationError = AxiosError<unknown>;

export const useUsersDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDelete>>,
    TError,
    { organizationId: Uuid; id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersDelete>>,
  TError,
  { organizationId: Uuid; id: Uuid },
  TContext
> => {
  const mutationOptions = getUsersDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
